generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("IDENTITY_DB_URL")
}

// IDENTITY SCHEMA MODELS
// (Introspected from existing database)
// -----------------------------------------


model achievement_type_lu {
  achievement_type_id   Decimal            @id(map: "achv_type_lu_pkey") @db.Decimal(5, 0)
  achievement_type_desc String             @db.VarChar(64)
  user_achievement      user_achievement[]
}

model country {
  country_code       String            @id @db.VarChar(3)
  country_name       String            @db.VarChar(40)
  modify_date        DateTime?         @default(now()) @db.Timestamp(6)
  participating      Decimal?          @db.Decimal(1, 0)
  default_taxform_id Decimal?          @db.Decimal(10, 0)
  longitude          Decimal?          @db.Decimal(10, 7)
  latitude           Decimal?          @db.Decimal(10, 7)
  region             String?           @db.VarChar(64)
  iso_name           String?           @db.VarChar(128)
  iso_alpha2_code    String?           @db.VarChar(2)
  iso_alpha3_code    String?           @db.VarChar(3)

}

model dice_connection {
  id             Int       @id(map: "dice_connection_pk") @default(autoincrement())
  user_id        Decimal   @unique @db.Decimal(10, 0)
  connection     String?   @db.VarChar(50)
  accepted       Boolean   @default(false)
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  short_url      String?   @db.VarChar(100)
  con_created_at DateTime? @db.Timestamp(6)
  user           user      @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([connection])
  
}

model email {
  user_id         Decimal?         @db.Decimal(10, 0)
  email_id        Decimal          @id(map: "u110_23") @default(dbgenerated("nextval('sequence_email_seq'::regclass)")) @db.Decimal(10, 0)
  email_type_id   Decimal?         @db.Decimal(5, 0)
  address         String?          @db.VarChar(100)
  create_date     DateTime?        @default(now()) @db.Timestamp(6)
  modify_date     DateTime?        @default(now()) @db.Timestamp(6)
  primary_ind     Decimal?         @db.Decimal(1, 0)
  status_id       Decimal?         @db.Decimal(3, 0)
  email_status_lu email_status_lu? @relation(fields: [status_id], references: [status_id], onDelete: NoAction, onUpdate: NoAction, map: "email_emailstatuslu_fk")
  email_type_lu   email_type_lu?   @relation(fields: [email_type_id], references: [email_type_id], onDelete: NoAction, onUpdate: NoAction, map: "email_emailtypelu_fk")
  user_email_xref user_email_xref[]
  user            user?            @relation("UserToEmail", fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([address])
  @@index([user_id, primary_ind], map: "email_user_id_idx")
}

model email_status_lu {
  status_id   Decimal   @id(map: "email_status_lu_pk") @db.Decimal(3, 0)
  status_desc String?   @db.VarChar(100)
  create_date DateTime? @default(now()) @db.Timestamp(6)
  modify_date DateTime? @default(now()) @db.Timestamp(6)
  email       email[]
  user_email_xref user_email_xref[] // Added back-relation to user_email_xref
}

model email_type_lu {
  email_type_id   Decimal   @id(map: "email_type_lu_pk") @db.Decimal(5, 0)
  email_type_desc String?   @db.VarChar(100)
  create_date     DateTime? @default(now()) @db.Timestamp(6)
  modify_date     DateTime? @default(now()) @db.Timestamp(6)
  email           email[]
  
}

model id_sequences {
  name             String  @id @db.VarChar(254)
  next_block_start Decimal @db.Decimal(12, 0)
  block_size       Decimal @db.Decimal(10, 0)
  exhausted        Decimal @default(0) @db.Decimal(1, 0)
  
}

model invalid_handles {
  invalid_handle_id Int    @id(map: "pk_invalid_hand556")
  invalid_handle    String @db.VarChar(20)
  
}


model security_groups {
  group_id             Decimal                @id(map: "pk_security_groups") @db.Decimal(12, 0)
  description          String                 @db.VarChar(254)
  challenge_group_ind  Int                    @default(0) @db.SmallInt
  create_user_id       Decimal?               @db.Decimal(12, 0)
  user_group_xref      user_group_xref[]
}

model security_status_lu {
  security_status_id Decimal           @id(map: "securitystatuslu_pkey") @db.Decimal(3, 0)
  status_desc        String?           @db.VarChar(200)
  user_group_xref    user_group_xref[]
  
}

model security_user {
  login_id        Decimal           @id(map: "pk_security_user") @db.Decimal(12, 0)
  user_id         String            @unique(map: "security_user_i2") @db.VarChar(50)
  password        String            @db.VarChar(300)
  create_user_id  Decimal?          @db.Decimal(12, 0)
  modify_date     DateTime?         @db.Timestamp(6)
  user_group_xref user_group_xref[]
  
}


model social_login_provider {
  social_login_provider_id Decimal             @id(map: "social_provider_prkey") @db.Decimal(10, 0)
  name                     String?             @db.VarChar(50)
  user_social_login        user_social_login[]
  
}

model sso_login_provider {
  sso_login_provider_id   Decimal          @id(map: "sso_provider_prkey") @db.Decimal(10, 0)
  name                    String?          @db.VarChar(50)
  type                    String           @db.VarChar(50)
  identify_email_enabled  Boolean          @default(true)
  identify_handle_enabled Boolean          @default(true)
  user_sso_login          user_sso_login[]
  
}

model user {
  user_id                    Decimal                      @id(map: "u175_45") @default(dbgenerated("nextval('sequence_user_seq'::regclass)")) @db.Decimal(10, 0)
  first_name                 String?                      @db.VarChar(64)
  last_name                  String?                      @db.VarChar(64)
  create_date                DateTime?                    @default(now()) @db.Timestamp(6)
  modify_date                DateTime?                    @default(now()) @db.Timestamp(6)
  handle                     String                       @db.VarChar(50)
  last_login                 DateTime?                    @db.Timestamp(6)
  status                     String                       @db.VarChar(3)
  activation_code            String?                      @db.VarChar(32)
  middle_name                String?                      @db.VarChar(64)
  handle_lower               String?                      @db.VarChar(50)
  timezone_id                Decimal?                     @db.Decimal(5, 0)
  last_site_hit_date         DateTime?                    @db.Timestamp(6)
  name_in_another_language   String?                      @db.VarChar(64)
  password                   String?                      @db.VarChar(16)
  open_id                    String?                      @db.VarChar(200)
  reg_source                 String?                      @db.VarChar(20)
  utm_source                 String?                      @db.VarChar(50)
  utm_medium                 String?                      @db.VarChar(50)
  utm_campaign               String?                      @db.VarChar(50)
  dice_connection            dice_connection?
  user_2fa                   user_2fa?
  user_achievement           user_achievement[]
  user_otp_email             user_otp_email[]
  user_social_login          user_social_login[]
  user_sso_login             user_sso_login[]
  user_status                user_status[]
  user_email_xref            user_email_xref[]
  emails                     email[]                      @relation("UserToEmail")

  @@index([activation_code], map: "user_activ_code_idx")
  @@index([handle])
  @@index([handle_lower], map: "user_lower_handle_idx")
  @@index([open_id])
  @@index([status])
}

model user_2fa {
  id           Int      @id(map: "user_2fa_pk") @default(autoincrement())
  user_id      Decimal  @unique @db.Decimal(10, 0)
  mfa_enabled  Boolean  @default(false)
  dice_enabled Boolean  @default(false)
  created_by   Decimal  @db.Decimal(10, 0)
  created_at   DateTime @default(now()) @db.Timestamp(6)
  modified_by  Decimal  @db.Decimal(10, 0)
  modified_at  DateTime @default(now()) @db.Timestamp(6)
  user         user     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model user_achievement {
  user_id             Decimal             @db.Decimal(10, 0) // Made non-nullable for PK
  achievement_date    DateTime            @db.Date
  achievement_type_id Decimal             @db.Decimal(5, 0)
  description         String?             @db.VarChar(255)
  create_date         DateTime?           @default(now()) @db.Timestamp(6)
  achievement_type_lu achievement_type_lu @relation(fields: [achievement_type_id], references: [achievement_type_id], onDelete: NoAction, onUpdate: NoAction, map: "achv_type_fk")
  user                user                @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "achv_user_fk") // Made user relation non-nullable as user_id is non-nullable

  // Define composite primary key
  @@id([user_id, achievement_type_id], map: "user_achievement_pkey") // Added @@id
  // @@ignore // Removed @@ignore
}

model user_group_xref {
  user_group_id      Decimal             @id(map: "pk_user_group_xref") @default(dbgenerated("nextval('sequence_user_group_seq'::regclass)")) @db.Decimal(12, 0)
  login_id           Decimal?            @db.Decimal(12, 0)
  group_id           Decimal?            @db.Decimal(12, 0)
  create_user_id     Decimal?            @db.Decimal(12, 0)
  security_status_id Decimal?            @db.Decimal(3, 0)
  create_date        DateTime?           @default(now()) @db.Timestamp(6)
  security_user      security_user?      @relation(fields: [login_id], references: [login_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_grp_xref1")
  security_groups    security_groups?    @relation(fields: [group_id], references: [group_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_grp_xref2")
  security_status_lu security_status_lu? @relation(fields: [security_status_id], references: [security_status_id], onDelete: NoAction, onUpdate: NoAction, map: "usergroupxref_status_fk")

  @@unique([login_id, group_id], map: "user_grp_xref_i2")
  
}

model user_otp_email {
  id         Int      @id(map: "user_otp_email_pk") @default(autoincrement())
  user_id    Decimal  @db.Decimal(10, 0)
  mode       Int      @db.SmallInt
  otp        String   @db.VarChar(6)
  expire_at  DateTime @db.Timestamp(6)
  resend     Boolean  @default(false)
  fail_count Int      @default(0) @db.SmallInt
  user       user     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, mode])
  
}

model user_social_login {
  social_user_id           String?               @db.VarChar(254)
  user_id                  Decimal               @db.Decimal(10, 0)
  social_login_provider_id Decimal               @db.Decimal(10, 0)
  social_user_name         String                @db.VarChar(100)
  social_email             String?               @db.VarChar(100)
  social_email_verified    Boolean?
  create_date              DateTime?             @default(now()) @db.Timestamp(6)
  modify_date              DateTime?             @db.Timestamp(6)
  social_login_provider    social_login_provider @relation(fields: [social_login_provider_id], references: [social_login_provider_id], onDelete: NoAction, onUpdate: NoAction, map: "user_social_provider_fk")
  user                     user                  @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "user_social_user_fk")

  @@id([user_id, social_login_provider_id], map: "user_social_prkey")
  
}

model user_sso_login {
  user_id            Decimal            @db.Decimal(10, 0)
  sso_user_id        String             @db.VarChar(100)
  sso_user_name      String?            @db.VarChar(100)
  provider_id        Decimal            @db.Decimal(10, 0)
  email              String?            @db.VarChar(100)
  sso_login_provider sso_login_provider @relation(fields: [provider_id], references: [sso_login_provider_id], onDelete: NoAction, onUpdate: NoAction, map: "user_sso_login_provider_fk")
  user               user               @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "user_sso_login_user_fk")

  @@id([user_id, provider_id], map: "user_sso_prkey") // Primary key
  @@index([sso_user_id, provider_id], map: "idx_user_social_login_sso_user_id_provider_id") // Index only, NOT unique
  
}

model user_status {
  user_id             Decimal             @db.Decimal(10, 0)
  user_status_type_id Decimal             @db.Decimal(3, 0)
  user_status_id      Decimal?            @db.Decimal(5, 0)
  user                user                @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "userstatus_user_fk")
  user_status_lu      user_status_lu?     @relation(fields: [user_status_id], references: [user_status_id], onDelete: NoAction, onUpdate: NoAction, map: "userstatus_userstatuslu_fk")
  user_status_type_lu user_status_type_lu @relation(fields: [user_status_type_id], references: [user_status_type_id], onDelete: NoAction, onUpdate: NoAction, map: "userstatus_userstatustype_fk")

  @@id([user_id, user_status_type_id], map: "userstatus_pk")
  
}

model user_status_lu {
  user_status_id Decimal       @id(map: "u113_26") @db.Decimal(5, 0)
  description    String?       @db.VarChar(100)
  user_status    user_status[]
  
}

model user_status_type_lu {
  user_status_type_id Decimal       @id(map: "userstatustypelu_pk") @db.Decimal(3, 0)
  description         String?       @db.VarChar(100)
  user_status         user_status[]
  
}

// Explicit definition for the user-email join table
model user_email_xref {
  user_id     Decimal   @db.Decimal(10, 0)
  email_id    Decimal   @db.Decimal(10, 0)
  is_primary  Boolean   // Assuming boolean based on name, adjust if Decimal(1,0)
  status_id   Decimal   @db.Decimal(3, 0) // Assuming relates to email_status_lu
  create_date DateTime? @default(now()) @db.Timestamp(6)
  modify_date DateTime? @default(now()) @db.Timestamp(6)

  user  user  @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "user_email_xref_user_fk") // Define relation
  email email @relation(fields: [email_id], references: [email_id], onDelete: NoAction, onUpdate: NoAction, map: "user_email_xref_email_fk") // Define relation
  email_status_lu email_status_lu? @relation(fields: [status_id], references: [status_id]) // Optional relation to status lookup

  @@id([user_id, email_id], map: "user_email_xref_pkey") // Define composite primary key
  @@index([email_id], map: "user_email_xref_email_idx")
}


// -----------------------------------------
// (Migrated from MySQL DDL)
// -----------------------------------------

model Client {
  id          Int      @id @default(autoincrement()) @map("id")
  clientId    String   @unique @map("client_id")
  name        String
  redirectUri String?  @map("redirect_uri") @db.VarChar(8192)
  secret      String?
  createdBy   Int?
  createdAt   DateTime? @db.Timestamp(0) // Use Timestamp(0) if you need second precision like MySQL datetime
  modifiedBy  Int?
  modifiedAt  DateTime? @db.Timestamp(0)

  @@map("client") // Map model name to table name
}

model Role {
  id          Int      @id @default(autoincrement()) @map("id")
  name        String   @unique @db.VarChar(45)
  createdBy   Int?
  createdAt   DateTime? @db.Timestamp(0)
  modifiedBy  Int?
  modifiedAt  DateTime? @db.Timestamp(0)

  roleAssignments RoleAssignment[] // Relation field

  @@map("role") // Map model name to table name
}

model RoleAssignment {
  id          Int      @id @default(autoincrement()) @map("id")
  roleId      Int      @map("role_id")
  subjectId   Int      @map("subject_id")
  createdBy   Int?
  createdAt   DateTime? @db.Timestamp(0)
  modifiedBy  Int?
  modifiedAt  DateTime? @db.Timestamp(0)
  subjectType Int      @default(1) @map("subject_type")

  role Role @relation(fields: [roleId], references: [id], map: "role_id") // Relation field

  @@unique([roleId, subjectId, subjectType], map: "role_subject_id_subject_type")
  @@index([subjectId], map: "subject_id_idx")
  @@index([roleId], map: "role_id_idx")
  @@map("role_assignment")
}

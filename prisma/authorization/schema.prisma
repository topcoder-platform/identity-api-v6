generator client {
  provider        = "prisma-client-js"
  output          = "../../node_modules/@prisma/client-authorization" // Relative path from *this file* to root node_modules
}

datasource db {
  provider = "postgresql"
  url      = env("AUTHORIZATION_DB_URL")
}

// -----------------------------------------
// AUTHORIZATION SCHEMA MODELS
// (Migrated from MySQL DDL)
// -----------------------------------------

model Client {
  id          Int      @id @default(autoincrement()) @map("id")
  clientId    String   @unique @map("client_id")
  name        String
  redirectUri String?  @map("redirect_uri") @db.VarChar(8192)
  secret      String?
  createdBy   Int?
  createdAt   DateTime? @db.Timestamp(0) // Use Timestamp(0) if you need second precision like MySQL datetime
  modifiedBy  Int?
  modifiedAt  DateTime? @db.Timestamp(0)

  clientUsers ClientUser[] // Relation field

  @@map("client") // Map model name to table name
}

model Group {
  id           Int      @id @default(autoincrement()) @map("id")
  name         String   @unique
  description  String?  @db.VarChar(2048)
  createdBy    Int?
  createdAt    DateTime? @db.Timestamp(0)
  modifiedBy   Int?
  modifiedAt   DateTime? @db.Timestamp(0)
  privateGroup Boolean  @default(true) @map("private_group")
  selfRegister Boolean  @default(false) @map("self_register")

  memberships GroupMembership[] // Relation field

  @@map("group") // Map model name to table name (needed because 'group' can be a reserved word)
}

model PermissionPolicy {
  id          String   @id @map("id") @db.VarChar(100)
  subjectId   String   @map("subjectId") @db.VarChar(100)
  subjectType String   @map("subjectType") @db.VarChar(40)
  resource    String   @db.VarChar(40)
  createdBy   Int?
  createdAt   DateTime? @db.Timestamp(0)
  modifiedBy  Int?
  modifiedAt  DateTime? @db.Timestamp(0)
  policy      String   @db.Text // Using Text for mediumtext equivalent

  @@unique([subjectId, subjectType, resource], map: "perm_policy_subject_resource_unique")
  @@index([subjectId], map: "subject_key")
  @@map("permission_policy")
}

model Role {
  id          Int      @id @default(autoincrement()) @map("id")
  name        String   @unique @db.VarChar(45)
  createdBy   Int?
  createdAt   DateTime? @db.Timestamp(0)
  modifiedBy  Int?
  modifiedAt  DateTime? @db.Timestamp(0)

  roleAssignments RoleAssignment[] // Relation field

  @@map("role") // Map model name to table name
}

model ClientUser {
  id         Int      @id @default(autoincrement()) @map("id")
  clientId   Int      @map("client_id")
  userId     Int      @map("user_id")
  scope      String?  @db.VarChar(8192)
  createdBy  Int?
  createdAt  DateTime? @db.Timestamp(0)
  modifiedBy Int?
  modifiedAt DateTime? @db.Timestamp(0)

  client Client @relation(fields: [clientId], references: [id], map: "client_id") // Relation field

  @@unique([clientId, userId], map: "client_user_id")
  @@index([clientId], map: "client_id_idx")
  @@index([userId], map: "user_id_idx") // Assuming user_id might relate elsewhere, added index
  @@map("client_user")
}

model GroupMembership {
  id             Int      @id @default(autoincrement()) @map("id")
  groupId        Int      @map("group_id")
  memberId       Int      @map("member_id")
  membershipType Int      @default(1) @map("membership_type") // Remove @db.UnsignedInt
  createdBy      Int?
  createdAt      DateTime? @db.Timestamp(0)
  modifiedBy     Int?
  modifiedAt     DateTime? @db.Timestamp(0)

  group Group @relation(fields: [groupId], references: [id], map: "group_id") // Relation field

  @@unique([groupId, memberId, membershipType], map: "group_member_id")
  @@map("group_membership")
}

model RoleAssignment {
  id          Int      @id @default(autoincrement()) @map("id")
  roleId      Int      @map("role_id")
  subjectId   Int      @map("subject_id")
  createdBy   Int?
  createdAt   DateTime? @db.Timestamp(0)
  modifiedBy  Int?
  modifiedAt  DateTime? @db.Timestamp(0)
  subjectType Int      @default(1) @map("subject_type")

  role Role @relation(fields: [roleId], references: [id], map: "role_id") // Relation field

  @@unique([roleId, subjectId, subjectType], map: "role_subject_id_subject_type")
  @@index([subjectId], map: "subject_id_idx")
  @@index([roleId], map: "role_id_idx")
  @@map("role_assignment")
}
